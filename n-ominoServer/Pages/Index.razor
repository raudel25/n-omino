@page "/"
@using Rules
@using Game
@using Player

<PageTitle>n-omino</PageTitle>

@if (_game)
{
    <GameGui></GameGui>
}
else
{
    if (_typeSelect == -1)
    {
        <div style="height: 50px;"></div>

        <div style="display: flex; justify-content: center;">
            <h1 style="font-family: Candara; font-size: 50px;">N-OMINO</h1>
        </div>

        <div style="height: 325px;"></div>

        <div style="display: flex; justify-content: center;">
            <h5>Seleccione el tipo para su juego</h5>
        </div>

        <div>
            <div style="display: flex; justify-content: center;">
                <div>
                    <input name="TypeGame" type="radio" @oninput="() => { _type = 0; }"/>
                    <label>Números enteros</label>
                    <br/>
                    <input name="TypeGame" type="radio" @oninput="() => { _type = 1; }"/>
                    <label>Letras</label>
                </div>
            </div>

            <br/>

            <div style="display: flex; justify-content: center;">
                <button class="Create" @onclick="() => { _typeSelect = _type; }">Aceptar</button>
            </div>
        </div>
    }

    if (_typeSelect == 0)
    {
        <BuildTournamentGui Games="_gameInt" DefaultValue="1" Tournament="_rulesInt"></BuildTournamentGui>

        if (_rulesInt.Count == 1)
        {
            <div style="display: flex; justify-content: center;">
                <SelectPlayers Teams="_teams" Players="_playersInt" DefaultValue="1"></SelectPlayers>
            </div>
        }
    }
    if (_typeSelect == 1)
    {
        <BuildTournamentGui Games="_gameChar" DefaultValue="'1'" Tournament="_rulesChar"></BuildTournamentGui>

        if (_rulesChar.Count == 1)
        {
            <div style="display: flex; justify-content: center;">
                <SelectPlayers Teams="_teams" Players="_playersChar" DefaultValue="'1'"></SelectPlayers>
            </div>
        }
    }

    <br/>
    <br/>

    if (_typeSelect != -1)
    {
        <div style="display: flex; justify-content: center;">
            <button class="Create" @onclick="Start">Comenzar</button>
        </div>
    }
}

@code
{
    private bool _game;

    private int _typeSelect = -1;

    private int _type = -1;

    private List<BuildGame<int>> _gameInt = new List<BuildGame<int>>();

    private List<BuildGame<char>> _gameChar = new List<BuildGame<char>>();

    private List<Player<int>> _playersInt = new List<Player<int>>();

    private List<Player<char>> _playersChar = new List<Player<char>>();

    private JudgeTournament<int>? _judgeInt;

    private JudgeTournament<char>? _judgeChar;

    private List<InfoRulesTournament<int>> _rulesInt = new List<InfoRulesTournament<int>>();

    private List<InfoRulesTournament<char>> _rulesChar = new List<InfoRulesTournament<char>>();

    private List<(int,int,string)> _teams = new List<(int, int,string)>();

    private async Task Start()
    {
        if (!CorrectGame()) return;
        CreateJudge();
        _game = true;

        if (_typeSelect == 0)
        {
            await Task.Run(() => _judgeInt!.TournamentGame());
        }
        if (_typeSelect == 1)
        {
            await Task.Run(() => _judgeChar!.TournamentGame());
        }
    }

    private void CreateJudge()
    {
        if (_typeSelect == 0)
        {
            _judgeInt = new JudgeTournament<int>(_gameInt, _playersInt, _teams, _rulesInt[0]);
        }
        if (_typeSelect == 1)
        {
            _judgeChar = new JudgeTournament<char>(_gameChar, _playersChar, _teams, _rulesChar[0]);
        }
    }

    private bool CorrectGame()
    {
        if (_typeSelect == 0)
        {
            if (_gameInt.Count > 0 && _playersInt.Count > 0 && _rulesInt.Count > 0 && _teams.Count > 0) return true;
        }
        if (_typeSelect == 1)
        {
            if (_gameChar.Count > 0 && _playersChar.Count > 0 && _rulesChar.Count > 0 && _teams.Count > 0) return true;
        }

        return false;
    }

    protected override void OnInitialized()
    {
        Printer.GameOverEvent += GameOver;
    }

    private void GameOver()
    {
        _ = InvokeAsync(() =>
        {
            _game = false;
            _typeSelect = -1;
            _type = -1;

            _gameInt = new List<BuildGame<int>>();
            _gameChar = new List<BuildGame<char>>();
            _playersInt = new List<Player<int>>();
            _playersChar = new List<Player<char>>();

            _rulesInt = new List<InfoRulesTournament<int>>();
            _rulesChar = new List<InfoRulesTournament<char>>();
            _teams = new List<(int, int,string)>();

            StateHasChanged();
        });
    }
}