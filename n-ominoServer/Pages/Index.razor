@page "/"
@using Rules
@using InteractionGui
@using Table
@using Game
@using Player

<PageTitle>n-omino</PageTitle>

@if (_game)
{
    <GameGui></GameGui>
}
else
{
    <SelectPlayers Teams = "new List<(int,int)>()" Players = "new List<Player<int>>()" DefaultValue = "0"></SelectPlayers>

    <div style="display: flex; justify-content: center;">
        <h1>N-OMINO</h1>
    </div>

    if (_typeSelect == -1)
    {
        <div style="display: flex; justify-content: center;">
            <h5>Seleccione el tipo para su juego</h5>
        </div>
        
        <div>
            <div style="display: flex; justify-content: center;">
                <div>
                    <input name="TypeGame" type="radio" @oninput="() => { _type = 0;}"/>
                    <label>Numeros enteros</label>
                    <br/>
                    <input name="TypeGame" type="radio" @oninput="() => { _type = 1;}"/>
                    <label>Letras</label>
                    <br/>
                    <input name="TypeGame" type="radio" @oninput="() => { _type = 2;}"/>
                    <label>Palabras</label>
                </div>
            </div>
            <div style="display: flex; justify-content: center;">
                <button class="Create" @onclick="() => {_typeSelect = _type;}">Aceptar</button>
            </div>
        </div>
    }

    if (_typeSelect == 0)
    {
        <BuildGameGui Game="_gameInt" DefaultValue="1"></BuildGameGui>
        <SelectPlayer PlayersList="_playersInt"></SelectPlayer>
    }
    if (_typeSelect == 1)
    {
        <BuildGameGui Game="_gameChar" DefaultValue="'1'"></BuildGameGui>
        <SelectPlayer PlayersList="_playersChar"></SelectPlayer>
    }
    if (_typeSelect == 2)
    {
        <BuildGameGui Game="_gameString" DefaultValue="_value"></BuildGameGui>
        <SelectPlayer PlayersList="_playersString"></SelectPlayer>
    }
    
    <button @onclick="Start">Start</button>
    <button @onclick="Build">Build</button>
}

@code
{
    private string _value = "1";
    
    private bool _game;
    
    private int _typeSelect = -1;

    private int _type = -1;
    private List<BuildGame<int>> _gameInt =new List<BuildGame<int>>();

    private List<BuildGame<char>> _gameChar = new List<BuildGame<char>>();

    private List<BuildGame<string>> _gameString = new List<BuildGame<string>>();

    private List<List<Player<int>>> _playersInt = new List<List<Player<int>>>();

    private List<List<Player<char>>>  _playersChar = new List<List<Player<char>>>();
    
    private List<List<Player<string>>>  _playersString = new List<List<Player<string>>>();

    private Judge<int>? _judgeInt;

    private Judge<char>? _judgeChar;

    private Judge<string>? _judgeString;

    private async Task Start()
    {
        _game = true;
        if (_typeSelect == 0)
        {
            await Task.Run(() =>_judgeInt!.Game());
        }
        if (_typeSelect == 1)
        {
            await Task.Run(() =>_judgeChar!.Game());
        }
        if (_typeSelect == 2)
        {
            await Task.Run(() =>_judgeString!.Game());
        }
    }

    private void Build()
    {
        if (_typeSelect == 0)
        {
            _judgeInt = A(_gameInt[0], _playersInt[0]);
        }
        
        if (_typeSelect == 1)
        {
            _judgeChar = A(_gameChar[0], _playersChar[0]);
        }
        
        if (_typeSelect == 2)
        {
            _judgeString = A(_gameString[0], _playersString[0]);
        }
        
    }

    private Judge<T> A<T>(BuildGame<T> game, List<Player<T>> player)
    {
        return new Judge<T>(null!,game.Rules,
            game.Initializer.StartGame(new List<(int, int)>() { (0, 0), (1, 1), (0, 2), (1, 3) }),
            player,game.Print);
    }
}