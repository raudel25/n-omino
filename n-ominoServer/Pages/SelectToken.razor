@using Table
@using InteractionGui
@typeparam T

@if (_visibility)
{
    <div class="HeadSelect">
        <label>Seleccione un ficha</label>
    </div>

    <div style="display: flex; justify-content: center; overflow: auto;">
        @if (_items.Length == 1)
        {
            if (DefaultValue is int)
            {
                <input type="number" @bind="_numbers[0]" class="SelectToken"/>
            }
            if (DefaultValue is string || DefaultValue is char)
            {
                <input @bind="_text[0]" class="SelectToken"/>
            }
        }
        else
        {
            @foreach (var item in _items)
            {
                if (item == 0)
                {
                    if (DefaultValue is int)
                    {
                        <input type="number" @bind="_numbers[item]" class="SelectTokenL"/>
                    }
                    if (DefaultValue is string || DefaultValue is char)
                    {
                        <input @bind="_text[item]" class="SelectTokenL"/>
                    }
                }
                if (item == _items.Length - 1)
                {
                    if (DefaultValue is int)
                    {
                        <input type="number" @bind="_numbers[item]" class="SelectTokenR"/>
                    }
                    if (DefaultValue is string || DefaultValue is char)
                    {
                        <input @bind="_text[item]" class="SelectTokenR"/>
                    }
                }
                if (item > 0 && item < _items.Length - 1)
                {
                    if (DefaultValue is int)
                    {
                        <input type="number" @bind="_numbers[item]" class="SelectToken"/>
                    }
                    if (DefaultValue is string || DefaultValue is char)
                    {
                        <input @bind="_text[item]" class="SelectToken"/>
                    }
                }
            }
        }
    </div>

    <div style="height: 5px;">
    </div>

    <div style="display: flex; justify-content: center;">
        <button @onclick="CreateRule" class="ButtonSelectHeadB">Crear</button>
    </div>
}

@code {

    [Parameter]
    public T? DefaultValue { get; set; }

    [Parameter]
    public List<Token<T>>? Tokens { get; set; }

    [Parameter]
    public BuildRules<T>? Build
    {
        get => _build;
        set
        {
            _build = value;
            _numbers = new int[_build!.Table!.DimensionToken];
            _text = new string[_build!.Table!.DimensionToken];
            _items = new int[_build!.Table!.DimensionToken];
            for (var i = 0; i < _numbers.Length; i++) _items[i] = i;
        }
    }

    private BuildRules<T>? _build;

    private int[] _numbers = Array.Empty<int>();

    private int[] _items = Array.Empty<int>();

    private string[] _text = Array.Empty<string>();

    private bool _visibility = true;

    private void CreateRule()
    {
        if (DefaultValue is int)
        {
            var token = new Token<int>(_numbers);
            Tokens!.Add((token as Token<T>)!);
        }
        if (DefaultValue is string)
        {
            var token = new Token<string>(_text);
            Tokens!.Add((token as Token<T>)!);
        }
        if (DefaultValue is char)
        {
            var aux = new char[_text.Length];

            for (var i = 0; i < aux.Length; i++)
            {
                if (_text[i].Length == 0) return;
                aux[i] = _text[i][0];
            }

            var token = new Token<char>(aux);
            Tokens!.Add((token as Token<T>)!);
        }

        _visibility = false;
    }

}