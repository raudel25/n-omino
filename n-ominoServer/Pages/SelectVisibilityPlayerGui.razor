@using Rules
@using InteractionGui
@typeparam T 

@if (_vilibility)
{
    <div class="SelectRule">
        <div class="HeadSelect">
            <h5>Seleccionar la visibilidad de los jugadores</h5>
        </div>

        <div style="display: flex; justify-content: center;">
            @if (!_selectValue)
            {
                <div style="width: 150px;">
                    <label>Cantidad de reglas</label>
                </div>

                <input type="number" @bind="_cant" class="InputSelectHead"/>

                <button @onclick="Select" class="ButtonSelectHeadT">Seleccionar</button>
            }
        </div>

        @if (_selectValue)
        {
            <div style="display: flex; justify-content: center;">
                <SelectVariantGui Cant="_cant+1" ValueParam="_valuesRule" VariantGui="new SelectVisibilityPlayer<T>()" Build="Build"></SelectVariantGui>
            </div>

            <div style="display: flex; justify-content: center;">
                <SelectVariantGui Cant="_cant" ValueParam="_valuesCondition" VariantGui="new SelectCondition<T>(DefaultValue!)" Build="Build"></SelectVariantGui>
            </div>
        }

        <div style="height: 10px"></div>

        <div style="display: flex; justify-content: center;">
            <button @onclick="CreateRule" class="ButtonSelectHeadB">Crear</button>
        </div>

        <div style="height: 5px"></div>
    </div>
}

@code {

    [Parameter]
    public BuildRules<T>? Build { get; set; }
    
    [Parameter]
    public T? DefaultValue { get; set; }

    private int _cant = 0;

    private bool _selectValue = false;

    private List<IVisibilityPlayer<T>> _valuesRule = new List<IVisibilityPlayer<T>>();

    private List<ICondition<T>> _valuesCondition = new List<ICondition<T>>();

    private bool _vilibility = true;

    private void Select()
    {
        _selectValue = true;
    }

    private void CreateRule()
    {
        if(_cant < 0) return;
        
        if (_valuesRule.Count == _cant+1 && _valuesCondition.Count == _cant)
        {
            Build!.VisibilityPlayer = new VisibilityPlayerRule<T>(_valuesRule.Take(_valuesRule.Count-1), _valuesCondition, _valuesRule[_valuesRule.Count-1]);
            _vilibility = false;
        }
    }

}