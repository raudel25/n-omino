@typeparam T1
@using InteractionGui
@using Rules
@using Table
@typeparam T2

@if (Cant != ValueParam!.Count)
{
    <div class="Select">
        <div class="HeadSelect">
            <label>@VariantGui!.Description</label>
        </div>

        <div style="display: flex">
            <EditForm Model="VariantGui">
                <InputSelect @bind-Value="_selcted" class="InputSelect">
                    @foreach (var item in VariantGui.Param)
                    {
                        <option value="@item.Index">@item.Name</option>
                    }
                </InputSelect>
            </EditForm>
            @if (Cant - ValueParam!.Count == 1)
            {
                <button @onclick="Next" class="ButtonSelect">Terminar</button>
            }
            else
            {
                <button @onclick="Next" class="ButtonSelect">Siguiente</button>
            }
        </div>

        @if (Cant != 1)
        {
            <div style="display: flex; justify-content: center;">
                <label>@ValueParam!.Count/@Cant</label>
            </div>
        }

        <div>
            @if (_selcted != -1)
            {
                if (VariantGui.Param[_selcted].ValueForParam)
                {
                    <div style="height: 5px"></div>

                    <div style="display: flex; justify-content: center;">
                        @if (DefaultValue is int)
                        {
                            <input type="number" class="InputSelectValue"
                                   @bind="_valueInt"/>
                        }
                        @if (DefaultValue is char)
                        {
                            <input @bind="_valueString" class="InputSelectValue"/>
                        }
                    </div>
                }
                if (VariantGui.Param[_selcted].Cant)
                {
                    <div style="height: 5px"></div>
                    <div style="display: flex; justify-content: center;">
                        <input type="number" @bind="_cantParam" class="InputSelectValue"/>
                    </div>
                }
                if (VariantGui.Param[_selcted].Comparison)
                {
                    <SelectVariantGui Cant="1" ValueParam="_comparisons" VariantGui="new SelectComparison<T2>(DefaultValue!)" Build="Build"></SelectVariantGui>
                }
                if (VariantGui.Param[_selcted].Token)
                {
                    <SelectToken DefaultValue="DefaultValue!" Tokens="_tokens" Build="Build"></SelectToken>
                }
            }
        </div>

        <div style="display: flex; justify-content: center;">
            @if (_selcted != -1)
            {
                <p>Descripcion: @VariantGui.Param[_selcted].Description</p>
            }
        </div>
    </div>
}


@code {

    [Parameter]
    public List<T1>? ValueParam { get; set; }

    [Parameter]
    public T2? DefaultValue { get; set; }

    [Parameter]
    public int Cant { get; set; } = 1;

    [Parameter]
    public IVariant<T1, T2>? VariantGui { get; set; }

    [Parameter]
    public BuildRules<T2>? Build { get; set; }

    private int _selcted = -1;

    private int _valueInt = 1;

    private string _valueString = "";

    private int _cantParam = 1;

    private List<IComparison<T2>> _comparisons = new();

    private List<Token<T2>> _tokens = new();


    private void Next()
    {
        if (_cantParam < 1)
        {
            _cantParam = 1;
            return;
        }
        if (_selcted != -1)
        {
            var param = new ParamSelectFunction<T2>();

            if (DefaultValue is int)
            {
                var paramInt = (param as ParamSelectFunction<int>)!;
                paramInt.ValueForParam = _valueInt;
            }

            if (DefaultValue is char)
            {
                var paramChar = (param as ParamSelectFunction<char>)!;
                if (VariantGui!.Param[_selcted].ValueForParam)
                {
                    if (_valueString.Length == 0) return;
                    paramChar.ValueForParam = _valueString[0];
                }
            }

            if (DefaultValue is string)
            {
                var paramString = (param as ParamSelectFunction<string>)!;
                paramString.ValueForParam = _valueString;
            }

            param.Cant = _cantParam;

            if (VariantGui!.Param[_selcted].Comparison)
            {
                if (_comparisons.Count == 1) param.Comp = _comparisons[0];
                else return;
            }

            if (VariantGui!.Param[_selcted].Token)
            {
                if (_tokens.Count == 1) param.Token = _tokens[0];
                else return;
            }

            ValueParam!.Add(VariantGui!.Values[_selcted](param));

            _comparisons = new List<IComparison<T2>>();
            _tokens = new List<Token<T2>>();
        }
    }

}