@using InteractionGui
@using Game
@using Rules
@typeparam T

<h3>Construye un juego</h3>

@if (!_create)
{
    <div style="display: flex; justify-content: center">
        <div>
            <SelectInitializerGameGui Initializer="Initializer" DefaultValue="DefaultValue!" Printers="Printer"></SelectInitializerGameGui>


        </div>

        <div>


            <SelectStealGui DefaultValue="DefaultValue!" Build="_rules"></SelectStealGui>
        </div>

        <div>
            <SelectAssignScorePlayerGui DefaultValue="DefaultValue!" Build="_rules"></SelectAssignScorePlayerGui>

            <SelectWinnerGameGui DefaultValue="DefaultValue!" Build="_rules"></SelectWinnerGameGui>
        </div>
    </div>
}

<button @onclick="CreateGame">Crear</button>

@code {

    [Parameter]
    public T? DefaultValue { get; set; }

    [Parameter]
    public List<Printer>? Printer { get; set; }

    [Parameter]
    public List<InitializerGame<T>>? Initializer { get; set; }

    [Parameter, EditorRequired]
    public List<InfoRules<T>>? Rules { get; set; }

    private BuildRules<T> _rules = new BuildRules<T>();

    private bool _create;

    private void CreateGame()
    {
        if (!SteelRules()) return;
        if (Initializer!.Count == 0) return;
        if (Printer!.Count == 0) return;

        _rules.ToPassToken = new ToPassTokenRule<T>(new[] {new NoToPassToken()}, new[] {new ConditionDefault<T>()}, new NoToPassToken());

        InfoRules<T> rulesGame = _rules.Build();
        Rules!.Add(rulesGame);

        _create = true;
    }

    private bool SteelRules()
    {
        if (_rules.Begin == null) return false;
        if (_rules.ScoreToken == null) return false;
        if (_rules.StealTokens == null) return false;
        if (_rules.TurnPlayer == null) return false;
        if (_rules.VisibilityPlayer == null) return false;
        if (_rules.WinnerGame == null) return false;
        if (_rules.AssignScorePlayer == null) return false;
        if (_rules.IsValidPlay == null) return false;
    //if (_rules.ToPassToken == null) return;
        return true;
    }


}