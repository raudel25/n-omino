@using Game
@using Table
@using InteractionGui

<div style="display: flex; justify-content: center;">
    <h5>@Player</h5>
</div>

<div style="display: grid; height: 140px; width: 100%; 
            border: solid #1c1f23 2px; border-radius: 10px;">

    @* <div style="height: 10px; grid-row: 1; grid-column-start: 1; grid-column-end: 4;"></div> *@
    <div style="display: grid; grid-column: 1; height: 138px; width: 150px; border-right: solid #1c1f23 2px; ">

        <div style="grid-row: 1; grid-column-start: 1; grid-column-end: 4;
                            display: flex; justify-content: center;">

            <p>@Action</p>
        </div>

        @if (Play != null)
        {
            @* <div style="width: 30px; grid-row: 2; grid-column: 1"></div> *@

            <div @ondblclick="() => Rotate(Play)" style="grid-row: 2; grid-column: 2">
                <div style="display: flex; justify-content: center;">
                    <TokenTypes Location="Play"></TokenTypes>
                </div>
                
            </div>
        }

        @* <div style="width: 30px; grid-row: 2; grid-column: 3"></div> *@

    </div>

    <div style=" grid-column:2; display: grid; width=1010px; grid-template-columns:20px 970px 20px; ">

        

        <div style="grid-colum:1; grid-row=2;"></div>

        
        <div style="overflow: auto; height: 135px; grid-column=2;grid-row=2;">

            <div style="display: grid; grid-column-gap:3px; grid-row-gap: 3px;">

                @foreach (var item in Locations)
                {
                    <div style="grid-row-start: @item.Location.Item1; grid-row-end: @item.Location.Item2; 
                                grid-column-start: @item.Location.Item3; grid-column-end: @item.Location.Item4"
                         @ondblclick="() => Rotate(item)">

                        <TokenTypes Location="item"></TokenTypes>
                    </div>
                }

            </div>

        </div>

        <div style="grid-colum:3; grid-row=2;"></div>

    </div>

    <div style="grid-column: 3;height: 138px; width: 150px; border-left: solid #1c1f23 2px; "></div>

</div>

@code {

    [Parameter]
    public IEnumerable<LocationGui> Locations { get; set; } = Array.Empty<LocationGui>();

    [Parameter]
    public LocationGui? Play { get; set; }

    [Parameter]
    public string Action { get; set; } = "";

    [Parameter]
    public string? Player { get; set; } = "";

    private void Rotate(LocationGui location)
    {
        location.Condition = !location.Condition;

        if (!location.Condition || location.Values.Length != 3) location.Values = AuxTable.CircularArray(location.Values, location.Values.Length - 1).ToArray();
    }

    protected override void OnInitialized()
    {
        Printer.BindHandEvent += BindLocationGui;
    }

    private void BindLocationGui(IEnumerable<LocationGui> location, LocationGui? play, string action, string player)
    {
        _ = InvokeAsync(() =>
        {
            Locations = location;
            Player = player;
            Play = play;
            Action = action;
            StateHasChanged();
        });
    }

}