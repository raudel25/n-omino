@using Game
@using Table
<div style="display: flex; justify-content: center;">
    <h3 style="color: azure">@Player!.Name</h3>
</div>

<div style="display: grid; height: 160px; width: 100%;">

    <div style="display: grid; grid-column: 1; height: 158px; width: 150px;">

        <div style="grid-row: 1; display: flex; justify-content: center; height: 25px;">
            <p style="color: azure">@Action</p>
        </div>

        @if (Play != null)
        {
            <div @ondblclick="() => Rotate(Play)" style="grid-row: 2; overflow: auto;">
                <div style="display: flex; justify-content: center;">
                    <TokenTypes Location="Play"></TokenTypes>
                </div>

            </div>
        }

    </div>

    <div style=" grid-column:2; width: 1000px; ">

        <div style="overflow: auto; height: 135px; margin: 2px;">

            <div style="display: grid; grid-column-gap:3px; grid-row-gap: 3px;">

                @foreach (var item in Locations)
                {
                    <div style="grid-row-start: @item.Location.Item1; grid-row-end: @item.Location.Item2; 
                                grid-column-start: @item.Location.Item3; grid-column-end: @item.Location.Item4"
                         @ondblclick="() => Rotate(item)">

                        <TokenTypes Location="item"></TokenTypes>
                    </div>
                }

            </div>

        </div>

    </div>

    <div style="grid-column: 3;height: 158px; width: 150px; display: grid">
        <div style="grid-row: 1; grid-column-start: 1; grid-column-end: 4;">

        </div>
        <div style="grid-row: 2; grid-column: 2; display: flex; justify-content: center">
            <div>
                <p style="color: azure">Score: @Player.Score</p>
                <p style="color: azure">Pases: @Player.Passes</p>
            </div>
        </div>
    </div>

</div>

@code {

    [Parameter]
    public IEnumerable<LocationGui> Locations { get; set; } = Array.Empty<LocationGui>();

    [Parameter]
    public LocationGui? Play { get; set; }

    [Parameter]
    public string Action { get; set; } = "";

    [Parameter]
    public InfoPlayerGui? Player { get; set; } = new("", 0, 0);

    private void Rotate(LocationGui location)
    {
        location.Condition = !location.Condition;

        if (!location.Condition || location.Values.Length != 3) location.Values = AuxTable.CircularArray(location.Values, location.Values.Length - 1).ToArray();
    }

    protected override void OnInitialized()
    {
        Printer.BindHandEvent += BindLocationGui;
    }

    private void BindLocationGui(IEnumerable<LocationGui> location, LocationGui? play, string action, InfoPlayerGui player)
    {
        _ = InvokeAsync(() =>
        {
            Locations = location;
            Player = player;
            Play = play;
            Action = action;
            StateHasChanged();
        });
    }

}